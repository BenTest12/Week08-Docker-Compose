# Starter pipeline

# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

triggers:
- main
- feature

variables:
  group: "compose-vars"
  containerSrvReg: weight-app-repo
  imageRepository: weightapprepo
  containerRegLogin: ben1213test.azurecr.io

pool: Docker

stages:

# Continuous Integration Process
- stage: CI
  jobs:
  - job: BuildAndPushDocker
    workspace: 
      clean: all
    steps:
      - task: Docker@2
        inputs:
          containerRegistry: $(containerSrvReg)
          repository: 'weightapprepo'
          command: 'buildAndPush'
          Dockerfile: '$(Build.SourcesDirectory)/Dockerfile'
      
      - task: UniversalPackages@0
        inputs:
          command: 'publish'
          publishDirectory: '$(System.DefaultWorkingDirectory)/docker-compose.yml'
          feedsToUsePublish: 'internal'
          vstsFeedPublish: '33ef9c60-0062-46db-bb15-ff7d3dd77d23'
          vstsFeedPackagePublish: 'compose_file'
          versionOption: 'patch'

# Continuous Deployment Process for Staging Environment
- stage: DeployToStaging
  variables: 
    - group: "compose-vars"
  condition: and(succeeded(), eq(variables['build.sourceBranch'], 'refs/heads/main'))
  jobs:
  - deployment: staging
    displayName: Deploy to Staging
    environment:
      name: compose
      resourceType: VirtualMachine
    strategy:
      runOnce:
        deploy:
          steps:

          - task: UniversalPackages@0
            inputs:
              command: 'download'
              downloadDirectory: '$(System.DefaultWorkingDirectory)'
              feedsToUse: 'internal'
              vstsFeed: '33ef9c60-0062-46db-bb15-ff7d3dd77d23'
              vstsFeedPackage: 'compose_file'
              vstsPackageVersion: '*'

          - task: DockerCompose@0
            inputs:
              containerregistrytype: 'Azure Container Registry'
              azureSubscription: 'Azure Pass - Sponsorship(4c91c978-76e8-4500-a93a-fed14688e040)'
              azureContainerRegistry: '{"loginServer":"ben1213test.azurecr.io", "id" : "/subscriptions/4c91c978-76e8-4500-a93a-fed14688e040/resourceGroups/registry/providers/Microsoft.ContainerRegistry/registries/ben1213test"}'
              dockerComposeFile: 'docker-compose.yml'
              dockerComposeFileArgs: |
                VERSION=$(VER)
                HOST_URL = $(HOSTURL)
                OKTA_ORG_URL = $(OKTA_URL)
                OKTA_CLIENT_ID = $(OKTA_CLIENT)
                OKTA_CLIENT_SECRET =$(OKTA_SECRET)
                PGUSERNAME = $(PGUSER)
                PGPASSWORD = $(PGPASS)
                PGDATABASE = db
              action: 'Run a Docker Compose command'
              dockerComposeCommand: 'up'
              arguments: '-d'